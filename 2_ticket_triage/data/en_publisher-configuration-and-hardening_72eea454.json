{
  "url": "https://docs.netskope.com/en/publisher-configuration-and-hardening",
  "title": "Publisher Configuration and Hardening - Netskope Knowledge Portal",
  "content": "Netskope provides prebuilt Publishers for VMWare (OVA format), Hyper-V (VHDX), Azure (VHD), and AWS (AMI). Additionally, you can also deploy a Publisher on top of a Ubuntu 22.04 based machine for other environments, such as GCP. The deployment methods and use of Docker images may raise some concerns about hardening and security. This document provides information that you can use to better understand how a Publisher is deployed and maintained. OS Requirements Ubuntu 22.04 is supported. Significant changes from the previously supported CentOS-based machine are: Ubuntu Publishers are CIS benchmark enabled. AppArmor and ufw are used instead of SELinux and FirewallD. OS Hardening Netskope takes a number of hardening steps for the images we provide including: Disabling root login to base OS and container OS. Removing root password. Removing unneeded Linux firmware and packages. Running the latest security updates prior to capturing the image. Disabling support for CTL-ALT-DEL to prevent accidental or malicious system restarts. You can perform additional hardening steps, such as: Hardening SSH to use keys rather than passwords. AWS AMI uses keys by default. Publishers deployed on other platforms must be manually configured to use keys. Using the native Ubuntu 22.04 firewall or network firewalls to limit access to and from the Publisher. Netskope Private Access leverages RSA 2048 for all encrypted communications including Client, Publisher, and inner tunnel. Updates Netskope updates the host OS and the Publisher package during the software update process: Base OS ( Ubuntu 22.04) security updates. Publisher (security, functionality, and enhancements). Netskope recommends that Publishers should always be updated to the most recent software version. AppArmor and ufw for Ubuntu The NPA Publisher is configured with AppArmor and ufw enabled and running. During Publisher installation, the following ufw configurations are made in order to enable the NPA Publisher to process data packets appropriately. apt-get install -y ufw echo y | ufw enable ufw allow to 191.1.1.1/32 proto tcp port 784 ufw allow to 191.1.1.1/32 proto udp port 785 ufw allow in on tun0 to any port 53 proto tcp ufw allow in on tun0 to any port 53 proto udp ufw allow 22/tcp ufw allow in on lo ufw deny in from 127.0.0.0/8 ufw deny in from ::1 ufw reload sudo pkill npa_publisher Note As indicated above, this configuration is applied automatically in all current NPA Publisher releases and is included here for reference/legacy Publishers. Remove ssh-rsa from Publisher SSH Configurations for Better Security Starting from Publisher R122, the prebuilt images remove ssh-rsa from three SSH daemon (sshd) configurations to improve security. HostbasedAcceptedKeyTypes -ssh-rsa HostKeyAlgorithms -ssh-rsa PubkeyAcceptedKeyTypes -ssh-rsa Description for these settings: HostbasedAcceptedKeyTypes: Defines which signature algorithms are allowed for host-based authentication. Publisher disables host-based authentication by default, so removing ssh-rsa here is an extra security measure. HostKeyAlgorithms: Defines which signature algorithms the server can use to identify itself. PubkeyAcceptedKeyTypes: Defines which public key types clients can use and servers will accept. Note that ssh-rsa is now considered insufficiently secure for these configurations, and modern SSH clients avoid using it by default. For Existing Publishers, there are two methods to avoid weak algorithms. Method 1 : Disable ssh-rsa in SSH daemon settings Edit the SSH configuration file. sudo vi /etc/ssh/sshd_config Add these three lines: HostbasedAcceptedKeyTypes -ssh-rsa HostKeyAlgorithms -ssh-rsa PubkeyAcceptedKeyTypes -ssh-rsa Restart the SSH daemon: sudo service sshd restart This prevents the SSH server from accepting any ssh-rsa related settings. Method 2: Force the SSH client to use secure algorithms. If you prefer not to modify Publisher settings, you can configure your SSH client. Check your known hosts file on your local machine: vi ~/.ssh/known_hosts Look for entries using ssh-rsa, such as: 192.168.18.133 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDnhBRNmn23Klj........... Remove that line and save the file.",
  "content_length": 4188,
  "crawl_timestamp": 1750781083.237612
}