{
  "url": "https://docs.netskope.com/en/netskope-aws-logstreaming-tenant-v1-0-0-plugin",
  "title": "Netskope AWS LogStreaming Tenant v1.0.0 Plugin - Netskope Knowledge Portal",
  "content": "This document explains how to configure the Netskope LogStreaming Tenant v1.1.0 plugin in Cloud Exchange. This plugin is used to fetch the Netskope Alerts (DLP, Malware, Policy, Compromised Credential, Malsite, Quarantine, Remediation, Security Assessment, Watchlist, UBA, CTEP, Device, and Content), Events (Page, Application, Audit, Infrastructure, Network, Incident, Endpoint and Client Status) and WebTx logs from AWS SQS queue enabled S3 Bucket. Prerequisites AWS Netskope LogStreaming Tenant Netskope Cloud Exchange: Log Shipper module Amazon SQS Queue should be enabled on S3 bucket with following permissions to the IAM user. GetObject (Read) GetObjectAttributes (Read) GetQueueAttributes (Read) GetQueueUrl (Read) ReceiveMessage (Read) DeleteMessage (Write) Connectivity to the following host: AWS Netskope LogStreaming service enabled in Netskope Tenant. CE Version Compatibility Netskope CE v5.1.1 LogStreaming Tenant Plugin Support This plugin is used to fetch the Netskope Alerts (DLP, Malware, Policy, Compromised Credential, Malsite, Quarantine, Remediation, Security Assessment, Watchlist, UBA, CTEP, Device, and Content), Events (Page, Application, Audit, Infrastructure, Network, Incident, Endpoint and Client Status) and WebTx logs from AWS SQS queue enabled S3 Bucket. Data Type Supported Events Yes (Page, Application, Audit, Infrastructure, Network, Incident, Endpoint and Client Status) Alerts Yes (DLP, Malware, Policy, Compromised Credential, Malsite, Quarantine, Remediation, Security Assessment, Watchlist, UBA, CTEP, Device, and Content) WebTx Yes Syslog CE Log No Mappings The current Syslog plugin does not have a mapping file for AWS Netskope LogStreaming alerts, events and WebTx, users need to add a custom mapping file to transform these alerts, events and WebTx data. Using this mapping file the one can ingest the data in JSON format. Sample Mappings file: { \"delimiter\": \"|\", \"syslog_map_version\": \"3.2.0\", \"cef_version\": \"0\", \"validator\": \"valid_extensions.csv\", \"taxonomy\": { \"json\": { \"events\": { \"NLS Application\": [], \"NLS Audit\": [], \"NLS Infrastructure\": [], \"NLS Page\": [], \"NLS Network\": [], \"NLS Incident\": [], \"NLS Endpoint\": [], \"NLS Clientstatus\": [], \"NLS Anomaly\": [], \"NLS DLP\": [], \"NLS EPDLP\": [], \"NLS Malware\": [], \"NLS Policy\": [], \"NLS Compromised Credential\": [], \"NLS Legal Hold\": [], \"NLS Malsite\": [], \"NLS Quarantine\": [], \"NLS Remediation\": [], \"NLS Security Assessment\": [], \"NLS Watchlist\": [], \"NLS UBA\": [], \"NLS CTEP\": [], \"NLS Content\": [], \"NLS Device\": [], \"NLS WebTx\": [] } } } } Permissions Amazon S3 bucket permissions to the IAM user to send Events, Alerts and WebTx data to buckets. GetObject (Read) GetObjectAttributes (Read) Amazon SQS Queue permissions to the IAM user to send Alerts data to Queue. GetQueueAttributes (Read) GetQueueUrl (Read) ReceiveMessage (Read) DeleteMessage (Write) API Details List of APIs Used This plugin uses Python libraries to read the AWS SQS messages and then download the AWS S3 bucket data from the file object received from the SQS messages. Library: The AWS SDK for Python (Boto3) Usage: The AWS SDK for Python (Boto3) to create, configure, and manage AWS services, such as Amazon Elastic Compute Cloud (Amazon EC2), Amazon Simple Queue Service and Amazon Simple Storage Service (Amazon S3). The SDK provides an object-oriented API as well as low-level access to AWS services. Creating S3 the Client s3_client = boto3.client( \"s3\", aws_access_key_id=self.aws_public_key, aws_secret_access_key=self.aws_private_key, aws_session_token=self.aws_session_token, region_name=self.region_name, config=Config(proxies=self.proxy, user_agent=self.useragent), ) Creating SQS the Client s3_client = boto3.client( \"sqs\", aws_access_key_id=self.aws_public_key, aws_secret_access_key=self.aws_private_key, aws_session_token=self.aws_session_token, region_name=self.region_name, config=Config(proxies=self.proxy, user_agent=self.useragent), ) To get the SQS Queue URL response = sqs_client.get_queue_url(QueueName=str(queue_name)) To receive messages from the SQS Queue response = sqs_client.receive_message( QueueUrl=queue_url, MaxNumberOfMessages=1, WaitTimeSeconds=2, MessageAttributeNames=[\"All\"], ) User Agent netskope-ce-5.1.1-tenant-aws-netskope-logstreaming-v1.0.0 Workflow Configure the Queue with Amazon S3 Buckets. Create a Netskope AWS LogStreaming policy. Configure an authentication method. Configure the Netskope AWS LogStreaming Tenant plugin. Validate the Netskope AWS LogStreaming Tenant plugin. Watch a Video Click play to watch a video: Configure the Queue with Amazon S3 Buckets For configuring the plugin, you will need to configure one queue with any of the Amazon S3 bucket, and for that you have to follow the below steps: Log in to your AWS account, and go to Amazon S3 > Buckets to find your configured buckets. Click on any of the buckets, and then go to Properties > Event Notifications . Here you can create event notifications to ingest the data from the specified folder in the S3 bucket to the configured SQS Queue. And from Amazon SQS > Queues , you can find your configured queues. Create an AWS Netskope LogStreaming Policy Search for IAM in the search box and then click Policies . Click Create Policy . Click on the JSON tab, and enter this policy. Click Next: Tags , and then Next: Review . { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\", \"s3:GetObjectAttributes\" ], \"Resource\": [ \"arn:aws:s3:::*/*\", \"arn:aws:s3:*:932414340604:accesspoint/*\" ] }, { \"Sid\": \"VisualEditor1\", \"Effect\": \"Allow\", \"Action\": [ \"sqs:DeleteMessage\", \"sqs:GetQueueUrl\", \"sqs:ReceiveMessage\", \"sqs:GetQueueAttributes\" ], \"Resource\": \"*\" } ] } Enter Name and click Create Policy . Attach this policy to the user. Go to IAM > Users and select the user for which you want to attach a policy. Click Add permissions , and then select the Add permissions option. Select Attach policies directly option under Permissions, and search for and select the policy created in the previous step for the source queue. Click Next , and then click Add permissions . The policy will be attached to the user. Plugin Authentication Methods IAM Role Anywhere Authentication Prerequisites The AWS Certificate Manager service is required to be enabled to authenticate the plugin using the AWS IAM Roles Anywhere Authentication Method. Note to sure you create the Private Certificate Authority, Trust Anchor and Profile in the same region in which your AWS SQS Queue resides. Create a Policy This Policy contains the required permissions for creating Private CA Certificate (including Permissions for creating Trust Anchor and Profile) and using the IAM Roles Anywhere. Go to Policy Generator and select IAM Policy as policy type, enter Add Statement details, and generate a policy. Select Type of Policy: IAM Policy Effect: Allow AWS Service: AWS Private Certificate Authority Actions: CreateCertificateAuthority DescribeCertificateAuthority GetCertificate GetCertificateAuthorityCertificate GetCertificateAuthorityCsr ImportCertificateAuthorityCertificate IssueCertificate ListCertificateAuthorities ARN: * Click Add Statement . Scroll back up to add another statement. Select Type of Policy: IAM Policy Effect: Allow AWS Service: AWS Identity and Access Management (IAM) Actions: AttachRolePolicy CreateAccessKey CreateRole DeleteRole PassRole ARN: * Click Add Statement . Scroll back up to add another statement. Select Type of Policy: IAM Policy Effect: Allow AWS Service: AWS Certificate Manager Actions: DescribeCertificate ExportCertificate GetCertificate ListCertificates ListTagsForCertificate RequestCertificate ARN: * Click Add Statement . Scroll back up to add another statement. Select Type of Policy: IAM Policy Effect: Allow AWS Service: AWS Identity and Access Management Roles Anywhere Actions: CreateProfile CreateTrustAnchor GetProfile GetTrustAnchor ListProfiles ListTrustAnchors ARN: * Click Add Statement . Click Generate Policy . Copy the Policy as it will be used in the next step for creating the policy required for creating the Private CA certificates. Go to AWS Console and select IAM from All Services . Click Policies in the left panel, and then click Create Policy . Copy the policy to the JSON tab, click Next:Tags , and then click Next:Review . Enter a name (like netskope-ce-rolesAnywhere-policy ) and click Save Changes . Create a Private Certificate Authority Log in to AWS Console. Search for Certificate Manager . Click AWS Private CA . Click Create a private CA . For Mode Options , select General-purpose . For CA type options , select Root . Enter the Organization (O) . For Key algorithm options , select RSA 2048 . Add tags if any (optional). Check the checkbox in the CA permissions options section. Check the checkbox in the Pricing section. Click Create to create the CA certificate. From Actions , select Install CA Certificate . Click Confirm and Install . Create a Trust Anchor Search for the IAM service, go to Roles under Access management scroll down to Roles Anywhere and select Manage . Click Create a Trust anchor . Enter a Trust anchor name, like netskope-ce-aws-verified-trust-anchor . Select AWS Certificate Manager Private CA (created in the previous steps) as a Certificate authority (CA) source . Select the Certificate that was created in the previous step in AWS Private Certificate Authority. Add tags if required. Click Create a trust anchor . Click on the created Trust Anchor and copy the Trust Anchor ARN. Create an IAM Role Go to IAM services in the AWS Console. Click Role in the Access Management submenu. Click Create Role . In the Trusted entity type, select Custom Trust Policy . Replace the Custom trust Policy with this Trust Policy. This policy contains the permissions for using the roles anywhere service: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Service\": [ \"rolesanywhere.amazonaws.com\" ] }, \"Action\": [ \"sts:AssumeRole\", \"sts:TagSession\", \"sts:SetSourceIdentity\" ] } ] } Click Next . In the Permissions policies, select the policy created in Create a SQS Queue Policy. Click Next . Provide a Role name (like AWS-SQS-Role ) and Description for the role. Click Create role . Search for the created role and click on the Role Name. Make a note of the Role ARN as this will be required in the Plugin configuration parameter Role ARN for the authentication method AWS IAM Roles Anywhere . Create a Profile Select Roles under Access management . Scroll down to Roles Anywhere and click Manage . Expand the Setup steps. Click Step 2: Configure roles . Click Configure a profile . Enter a Profile name, like AWS-SQS-Profile . Select the role created in Create IAM Role . Remove the Inline Policy . Click Create a profile . Select the created Profile and copy the Profile ARN . Go to AWS Certificate Manager > Request certificate . Select Request a private certificate . Click Next . Select the Certificate authority created in the previous step. Provide a domain name in the Fully qualified domain name field, like netskope-ce-verified-access.com . Select RSA 2048 as the Key algorithm. Add tags if required. Acknowledge the Certificate renewal permissions. Click Request . Go to List certificates from the navigation pane of AWS Certificate Manager. Select the certificate created previously. Click Export . Enter a passphrase . Make a note of the passphrase as it will be required for the Configuration of the AWS S3 Plugin using the AWS IAM Roles Anywhere Authentication method. Click Generate PEM Encoding . Download all the Certificates as it won’t be visible again. For new certificates, you will need to Export them again. The Certificate body, Certificate Private Key will be required for the Configuration of the AWS Verified Access Plugin using the AWS IAM Roles Anywhere authentication method. For more info, go to AWS IAM Role Anywhere . AWS Authentication Create a Role Go to IAM services in the AWS Console. Click Create role . Select the AWS Service . Under Use case, select EC2 . Click Next . Select the permission policy created in Create a SQS Queue Policy . Click Next . Enter a Role Name (like netskope-ce-instance-role ) and Description. Click Create Role . Assign a Role to an EC2 Instance Log in to your EC2 instance console. Click Instances under Instances . Go to Action > Security > Modify IAM Role . Select the Role that you created above in Create a Role. ( netskope-ce-instance-role ). Click Add IAM Role or Modify IAM Role . Note that both EC2 instance and Queue should be on the same region. Assign a Role to a K8s Instance Open your Role created for ServiceAccount while creating K8s instance. Attach the policy created in Create a SQS Queue Policy . Configure the AWS Netskope LogStreaming Tenant The tenant creation workflow has been updated. Go to Settings > Plugins, select “Tenant” as the Category, and configure the tenant from the filtered Tenant plugins. In Cloud Exchange, go to Settings > Plugins, select “Tenant” as the Category and search for “AWS Netskope LogStreaming Tenant. Click on “AWS Netskope LogStreaming Tenant” plugin and enter below details: Authentication Method: Select the method to be used for authentication (Deployed on AWS/AWS IAM Roles Anywhere) Private Key: Private Key for decrypting the AWS Private CA Certificate. Required for the AWS IAM Roles Anywhere authentication type. Certificate Body: Certificate Body for AWS Public/Private CA Certificate. Required for the AWS IAM Roles Anywhere authentication type. Password Phrase: Password Phrase for decrypting the CA Certificate. Required for the AWS IAM Roles Anywhere authentication type. Profile ARN: AWS Profile ARN for AWS client authentication. Required for the AWS IAM Roles Anywhere authentication type . Role ARN: AWS Role ARN for AWS client authentication. Required for the AWS IAM Roles Anywhere authentication type. Trust Anchor ARN: AWS Trust Anchor ARN for AWS client authentication. Required for the AWS IAM Roles Anywhere authentication type. AWS Region Name: AWS Region Name in which the SQS queue enabled S3 bucket is setup. Make sure that the region name matches the region in the Profile ARN and Trust Anchor ARN. AWS SQS Queue Name: AWS SQS Queue Name with which the S3 bucket is setup. To get the details go to AWS > SQS > QueueName . Make sure that the provide queue pre-configured on your AWS instance. A new queue will not be created if the provided queue does not exist. Click Save . The plugin configuration will be available at Settings > Netskope Tenants . Validate the LogStreaming Tenant Plugin Validate the Pull To validate the pulling of indicators from the Netskope tenant. In Cloud Exchange, go to the Logging and search for the pulled logs with the filter “message contains pulled” . This validates the following alerts/events with the plugin: Device, DLP, Malsite, Malware, Policy, Remediation, Security assessment, UBA, Watchlist, Application, Network, Page. Troubleshooting the LogStreaming Tenant Plugin Facing issues while fetching Alerts/Events or WebTx data from the configured Queue If you have configured AWS Netskope LogStreaming Tenant, AWS Netskope LogStreaming plugin and 3rd-party SIEM platform successfully and still you are getting error after configuring SIEM Mapping for the plugin, it can be due to on of these reasons: You do not have access to the configured Queue. The permissions provided to IAM User are insufficient. All alerts/events/webtx data are consumed and nothing is available to pull from the queue. The provided queue in the plugin might not be enabled in the S3 bucket. What to do: Verify if the Queue is available on the AWS SQS service. Verify that IAM User has provided sufficient permissions provided. For the minimum permissions, you can refer to Permissions . Verify that you have data to consume from the queue, for that you have to go to Amazon SQS > Queues. To verify the enabled queue in the S3 bucket, follow the steps in Configure the Queue with Amazon S3 Buckets section. Facing issues while configuring the new plugin If you’re creating a new plugin with AWS IAM Roles Anywhere and get this error: What to do : Here while expanding the logger, we can see “At least one of the Trust Anchor ARN, Role ARN, and Profile ARN has a different account ID” – so we would have to check that the provided parameters are generated from the same account and have the same region. Known Behavior If you have RBACv3 enabled in your Netskope tenant you will not be able to use the Netskope LogStreaming services.",
  "content_length": 16565,
  "crawl_timestamp": 1750780459.119648
}